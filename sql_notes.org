
SQL - Notes

* Queries 
            
      SELECT * FROM table

      SELECT DISTINCT * FROM table - returns items but removes doublers

      WHERE - allows for use of conditionals
       
      LIKE - for similar comparason, use with wildcards.
            wildcards:
            % - means any sequence of characters
            _ means any individual character
            example: WHERE name LIKE 'gar&'

       IS NULL or IS NOT NULL - is how to check for null values

      BETWEEN - is for selecting a range i.e BETWEEN 'C' AND 'G'. Note char's are not including the last letter but numbers are inclusive.

      IN - used to test if a value is IN another set of values. Same as writting a series of && operators.:
            example: WHERE country IN('UK', 'CA');

      AND - just means && 
      OR - just means ||

      =  means == in sql
            use ''s for comparing strings.  example: WHERE name = 'frank'

      - ORDER BY - is for sorting data. Can be used like SELECT * FROM table WHERE year > 1999 ORDER BY DESC
        DESC - decending order.
        ASC - accending order

      LIMIT - is the maximum amount of results it will return

      CASE - is an if statement for Sql
      - example
        SELECT OrderID, Quantity,
        CASE
          WHEN Quantity > 30 THEN "The quantity is greater than 30"
          WHEN Quantity = 30 THEN "The quantity is 30"
          ELSE "The quantity is something else"
        END
        FROM OrderDetails;

      AS - Alias, a way of renaming a column for output. 
            example: SELECT last_name AS name
            can also be written as: SELECT last_name "name"
            NOTE: the only time to use " "s
      DESCRIBE (DESC) - shows information about the structure of database. example: DESC tablename;

      || - Concatenation operator
            example SELECT department_id ||' '|| name
            FROM departments;
            NOTE: the ' ' creates a char space between the words, output reads 
            50 Shipping

      DISTINCT - removes duplicates from the output, example: SELECT DISTINCT someshite_id

      ORDER OF PRECEDENCE
            Arithmetic
            Concatenation
            Comparason
            IS NULL, LIKE, IN
            NOT
            AND
            OR

* functions
      UPPER(variable)
      LOWER()
      INITCAP() - make first letter uppercase
      CONCAT(var1, var2) - concatinates 
      SUBSTR(var, number1, number2)
      LENGTH() 
      INSTR(var, 'char') - returns the number position of character

      LPAD(var, number, 'char') - Left Padding, creates padding from the number amount. Also has RPAD() - right padding

      TRIM(LEADING 'char' FROM 'string') - trims to the right from the 'char' stated. Also has TRAILNG (backwards) and BOTH.

      REPLACE(string_words, string_to_replace, replacement_string)

      Substitutions - when a query will be re-run with diferent variables. example - WHERE name =: name_input;

      ROUND(var, decimal number) 
      TRUNC() - the same as ROUND but works with dates 
      MOD() - Modulo

      - TO_CHAR()
            TO_CHAR(date_var, 'Month dd, YYYY) -Dates have loads of formats,
                  this is just one of them.

            TO_CHAR(number_var, 'format model') - same as above but with number
            formats.

      - TO_NUMBER()
           TO_NUMBER(string_var, 'format') - format model is optional in this
           method. 
           NOTE: oracle will do data conversions automatically when using
           comparisons
      
      TO_DATE(char_string, 'format')

      fx - modifier that keeps string data in the exact format when
      converted, e.g when using a TO_DATE function
      

* Date functions
	SYSDATE - returns the current database date and time.
	MONTHS_BETWEEN(date1, date2)  
	ADD_MONTHS
	NEXT_DAY(SYSDATE, 'Saturday') - returns the date of next Saturday.
	LAST_DAY(date) - returns a date of last day of month
	ROUND(date, 'Month') rounds a date to first day of month.
	TRUNC(date, 'Month') - chops a date to the Month 
	TO_DATE(string) - converts a string to date

* Date Formats

* Currency Formats

* Data Types
	VARCHAR2 - Character data of variable length
      CHAR - Character data of fixed length
      NUMBER - variable number data
      DATE

* Null value functions
      NVL(arg1, arg2) - both arguments can be a variable or an expression. If
            arg1 gives a NULL value, it assings the value or arg2.
      NVL2(arg1, arg2, arg3) - same as above but not null returns arg2, NULL
            value returns arg3
      NULLIF(arg1, arg2) - returns null if arg1 and arg2 are equal, else
            returns arg1
      COALESCE(arg1, arg2, argN) - same as NVL but will continue through all
            args. Can also take a value at the end to return if all args are
            NULL

* JOINS 
NATURAL JOIN - basic way to join two tables. 
example: FROM table NATURAL JOIN other_table
Note: dosen't work with same column name, diferent data types

CROSS JOIN - returns all possible cominations from the joining of tables 
      NOTE: oracle call this a "cartesian product"

USING - this allows to select which colum to use from NATURAL JOIN
      Example: FROM table NATURAL JOIN other_table USING (table_id);
      Note: use for joining table columns with the same name, diferent data
      type.

ON - use the on clause when the JOIN table names are diferent.
      Example: 
      
INNER JOIN - a join of two tables that only returns the matching rows

OUTER JOIN - when a join returns matched and unmatched rows

RIGHT OUTER JOIN - Return all records from the right table, and the matched records from the left  

LEFT OUTER JOIN - Return all records from the left table, and the matched records from the right table

FULL OUTER JOIN - Return all records when there is a match in either left or right table

equi-join - oracle jargon for a NATURAL JOIN, JOING USING "column", JOIN ON
      (equality operator) = 

non equi-join - oracle jargon for a JOIN ON 

* Hierarcical queries
  START WITH 
  CONNECTED BY PRIOR
  LEVEL - provides numbers to list the level of hierarchy in re
* Group Functions
** Count 
   returns the number of non null values in a column
** count(*)
   returns the number of rows in a table
** Distinct
   returns the number of unique values in a column
* Subquery
  A subquery is a nested query in brackets, that is part of a bigger query.

** Group Functions
   group functions when used in subqueries return a single 
** IN, ANY, ALL 
   used for connecting subqueries. ANY is like a if true statement for a list of data.
   All is the same but all the list items must match the conditionals.
   Note: IN and ANY return null values, ALL will not.
*** example
    SELECT last_name, hire_dateFROM employees
    WHERE EXTRACT(YEAR FROM hire_date) < ALL
    (SELECT EXTRACT(YEAR FROM hire_date)
    FROM employees
    WHERE department_id=90);
* GROUP BY 
  groups all the matching data in a column together
  - example:
    SELECT department_id, MAX(salary)
    FROM employees
    GROUP BY department_id;
  
  This will put put all the data with matching department_id's
  together and the apply the MAX(salary) method to the data, 
  which will output ONLY one department_id and salary.
  Group by statements appear to be evaluated first, then the 
  command on the grouping.
  
  Groups withing groups.
  - example:
    SELECT department_id, MAX(salary)
    FROM employees
    GROUP BY department_id department_name;
** HAVING
   having is used to restrict groups, similar to the WHERE clause being used to restrict rows.
   - example
     SELECT region_id, ROUND(AVG(population))
     FROM wf_countries
   GROUP BY region_id 
   HAVING MIN(population) > 3000000
   ORDER BY region_id;
** rollup
   the rollup action adds up the values of each group in a group by clause, then gives you a 
   grand total at the end.
   example:
   - SELECT department_id, job_id, SUM(salary)
     FROM employees
     WHERE department_id < 50
     GROUP BY ROLLUP (department_id, job_id);
** CUBE
   groups the selected groups by ALL cominations possible
** GROUPING SETS
   lets you perform multiple grouping sets in one querie
   example:
   - SELECT department_id, job_id, manager_id, SUM(salary)
     FROM employees
     WHERE department_id < 50
     GROUP BY GROUPING SETS
     ((job_id, manager_id), (department_id, job_id), (department_id, manager_id));

** GROUPING functions
   The GROUPING functions will return 1 for an computed row and 0 for a returned row. This
   is so that they are labeled when they are returned form the query.

   Or jsut name them with the syntax
   SELECT department_id, job_id, SUM(salary),
   GROUPING(department_id) AS "Dept sub total",
   GROUPING(job_id) AS "Job sub total"
* SETS
** UNION
   joins two tables and returns rows from both tabels with NO dublicates. (one of each doubler)
** UNION ALL 
   joins two tables and returns all form both tables.
** INTERSECT
   joins two tables and returns only rows common to both tables. (only one of each match)
** MINUS
   returns all rows found in one table but not the other.
** the syntax 
   SELECT table1
   FROM employees
     UNION
   SELECT table2
   FROM job_history

** aditional notes
*** when comparing tables with a missing column to match you can create one, i.e TODATE(null_)
*** 
* CREATING (dml)
** CREATE TABLE
   CREATE TABLE tablename (column_name datatype, ... );

   or with a DEFAULT type
   CREATE TABLE table
   (name DATE DEFAULT SYSDATE);
** copy a table
   CREATE TABLE copy_tablename
     AS  (SELECT * FROM tablename );
** DESCRIBE

** INSERT
   inserts rows into tables
   example:

   INSERT INTO copy_departments
     (department_id, department_name, manager_id, location_id)
   VALUES 
     (200, 'Human REsources', 205, 1500);
** UPDATE
   UPDATE employees
   SET phone_number = '123456'
   WHERE employee_id = 303;
   
*** multiple row example:
      UPDATE employees
      SET phone_number = '123456', last_name = 'Jones'
      WHERE employee_id = 303;
*** subquery example
    UPDATE employees
    SET SALARY = (SELECT salary
                  FROM employees
                  WHERE employee_id = 100)
    WHERE employee_id = 303;
*** multiple row subquery example
    UPDATE employees
    SET salary = (SELECT salary
                  FROM employees
                  WHERE employee_id = 100)
        job_id = (SELECT job_id
                  FROM employees
                  WHERE employee_id = 205)
    WHERE employee_id = 303;
*** update using correlated syntax
    UPDATE employees e
    SET e.department_name = (SELECT salary
                            FROM employees
                            WHERE employee_id = 100)
    
** DELETE
   DELETE from employees
   WHERE employee_id = 303;
*** DELETE with subquery
    DELETE FROM employees
    WHERE department_id =
      (SELECT department_id
      FROM departments
      WHERE department_name = 'shipping');
** FOR UPDATE
   locks rows or tables in a database until user issues a rollback
   or COMMIT
   
** DEFAULT
   use the word DEFAULT for any value to be a default value
** MERGE
   merge will insert and update similtaneosly, if a value is missing, a new one will
   be inserted.
   example:
   MERGE INTO copy_table c USING employees e 
     ON (c.employee_id = e.employee_id)
   WHEN MATCHED THEN UPDATE
     SET
        c.last_name = e.last_name,
        c.department_id = e.department_id
   WHEN NOT MATCHED THEN INSERT
     VALUES (e.employee_id, e.last_name, e.department_id);

** multi table insert
   INSERT ALL
     INTO my_employees
       VALUES (hire_date, first_name, last_name)
     INTO copy_my_employees
       VALUES (hire_date, first_name, last_name)
   SELECT hire_date, first_name, last_name
   FROM employees;
   
* Creating Tables
** table access
   if its not your table use this syntax
   - SELECT *
     FROM table_owner_name.table_name;
** External table
   when the data is not held in the database files but in a flat file stored 
   externally to the database
   syntax is written as ORGANISATION EXTERNAL
** data types
   columns can only hold one data type
*** CHAR
    variable size, max size 2000 characters
*** VARCHAR 
    variable size, max size 4000 characters
*** CLOB 
    variable size, max 128 TB
*** NUMBER
    VARIABLE SIZE, max precision 38 digits
*** DATE, 
    
*** TIMESTAMP,
    an extension of date which allows fractions of a second
*** TIMESTAMP WITH TIME ZONE
    same but with a displacement from UTC or GMT.
*** TIMEZONE WITH TIME ZONE
    same but time is auto converted to users timezone
*** INTERVAL
**** INTERVAL YEAR TO MONTH
     stores a period of time measured in yeares and months
**** INTERVAL DAY TO SECOND
     stores a period of time measured in days, hours, minutes and seconds
    
*** binary values (WAV, JPG etc)
**** RAW
     variable size, max 2000 bytes
**** BLOB
     variable size, maximum 128 TB
